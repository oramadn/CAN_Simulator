import sys, random
import primaryWindow, src
from PySide6.QtWidgets import QApplication, QMainWindow,QTableWidgetItem,QInputDialog
from PySide6.QtCore import Slot, QTimer

class primayWindowClass(QMainWindow,primaryWindow.Ui_primaryWindow):
    data = 0 #Class attributes
    variableFrames = []
    staticFrames = []

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.resize(950,1000)
        self.generateButton.clicked.connect(self.generateData)
        self.startButton.clicked.connect(self.startSimulation)
        
    def addRow(self, row_data):
        row_position = self.mainTable.rowCount()
        self.mainTable.insertRow(row_position)
        for column, data in enumerate(row_data):
            item = QTableWidgetItem(str(data))
            self.mainTable.setItem(row_position, column, item)

    def clearTable(self):
        self.mainTable.clearContents()
        self.mainTable.setRowCount(0)

    def openInputDialog(self):
        while(True):
            frameCount, ok = QInputDialog.getText(self, 'Input Dialog', 'How many frames would you like to generate (10-100)?: ')
            if ok:
                try:
                    if int(frameCount) >= 10 and int(frameCount) <= 100:
                        return int(frameCount)
                except ValueError:
                    print("\nInvalid input")
                    continue
            else:
                return 0

    @Slot()
    def generateData(self):
        print('\nGenerate start\n')
        frameCount = self.openInputDialog()
        self.data = src.generateFrames(frameCount)
        
        if frameCount != 0: #If the user hits cancel when prompted to enter number of needed frames
            data_row = []
            for frame in self.data: #This loop formats the data such that it can fit into 9 columns (ID , 0-7) where each column has 1 byte
                data_row.append(frame.id)
                for i in range(2, len(frame.data), 2):
                    data_row.append("0x" + frame.data[i:i+2])
                data_row_copy = data_row.copy()
                self.addRow(data_row_copy)
                data_row.clear()
            self.generateButton.hide() #Grey out the start button
            self.startButton.setEnabled(True) #Enable the start simulation button
            print('\nGenerate finish\n')

    @Slot()
    def startSimulation(self):
        print("\nSimulation start\n")
        self.variableFrames, self.staticFrames = src.splitFrames(self.data)
        
        #Running
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.runSimulation)
        self.timer.start(1000)  # Call every 1000 milliseconds (1 second)

        print("\nSimulation finish\n")

    def runSimulation(self):
        variableBytesIdx = src.generateVariableBytesIdx(self.variableFrames)
        print(variableBytesIdx)
        
#def main():
    

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = primayWindowClass()
    
    window.show()
    sys.exit(app.exec())